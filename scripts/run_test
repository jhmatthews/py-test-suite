#!/bin/bash
##########################################
#
#		University of Southampton, 5/8/15
#
#		James Matthews
#
#		run_test
#
# run_test is a shell script which compiles python then runs a load 
# standard parameter files.
#
# Usage: ./run_test [options]"
#
#  -v [version]: avoids using git to download and runs with the PYTHON version string supplied
#  -r : also pulls the latest release and runs with that
#  -h : print this message
#  -b [branchname]
#  default is to download the latest version and test against whatever release is in outputs_release
#  
# Environment variables needed are
# PYTHON_TEST_VERSION : mirror git repo
# PYTHON : normal git repo
# PYTEST: directory where tests are run
##########################################

if [ $USER == "jm8g08" ]; then  
    source /home/jm8g08/.bashrc
fi

display_help() { 
	echo "run_test is a shell script which compiles PYTHON then runs a load of standard parameter files."
	echo ""
	echo "Usage: ./run_test [options]"
	echo ""
	echo "-v [version]: avoids using git to download and runs with the PYTHON version string supplied"
	echo "-r : also pulls the latest release and runs with that"
	echo "-h : print this message"
	echo "default is to download the latest version and test against whatever release is in outputs_release"
	echo "" 
	exit 
	} 


# set default command line args and read from command line
GIT=1
RELEASE=0
VERSION="test"
BRANCHNAME="dev"

if [  $# -ge 1 ]; then 
    if [ $1 == "-r" ]; then
    	RELEASE=1
    elif [ $1 == "-v" ]; then
    	GIT=0
    	VERSION=$2
    elif [ $1 == "-b" ]; then
    	BRANCHNAME=$2
    elif [ $1 == "-h" ]; then
    	display_helpss
    else 
    	echo "Did not understand command line option"
    	display_help
    fi
fi

# echo the directory
echo $PYTEST 

# First make sure the error and output files are empty.
: > $PYTEST/run_test_out.txt
: > $PYTEST/run_test_err.txt

date > $PYTEST/run_test_out.txt
date > $PYTEST/run_test_err.txt



# cd into $PYTHON_TEST_VERSION/source, cp to a directory in $PYTHON and make python 
# this is a bit of a kluge. I don't want to overwrite any local code in $PYTHOn, but I don't want to
# have a whole separate structure. so I have a mirror git repo in $PYTHON_TEST_VERSION, which
# then gets copied to $PYTHON/source_for_tests/ so I can use all the libraries and data like normal
if [ $GIT == 1 ]; then 
	cd $PYTHON_TEST_VERSION/source
	git checkout $BRANCHNAME
	git pull origin $BRANCHNAME
	cp *.c $PYTHON/source_for_tests/
	cp *.h $PYTHON/source_for_tests/
	cp Makefile $PYTHON/source_for_tests/
	cp $PYTHON_TEST_VERSION/examples/*.pf $PYTEST/outputs_$BRANCHNAME/
	cd $PYTHON/source_for_tests/
	make clean
	make VERSION=test python
	make clean
	make VERSION=test py_wind 
	make clean
fi

# next commented out section could be uncommented if you wanted to test against the release branch
if [ $RELEASE == 1 ]; then
	cd $PYTHON_TEST_VERSION/source
	git checkout release
	git pull origin release
	cp *.c *.h Makefile $PYTHON/source_for_tests/
	cp ../examples/*.pf $PYTEST/compare/
	cd $PYTHON/source_for_tests/
	make clean
	make VERSION=release python
	make clean
	make VERSION=release py_wind 
	make clean
fi

# cd into the outputs directory and run the models
echo $PYTEST/outputs_$BRANCHNAME
mkdir $PYTEST/outputs_$BRANCHNAME
cd $PYTEST
git add $PYTEST/outputs_$BRANCHNAME
cd $PYTEST/outputs_$BRANCHNAME
Setup_Py_Dir

nice $PYTHON/bin/py$VERSION cv_standard > cv_standard.out &
nice mpirun -n 10 $PYTHON/bin/py$VERSION fiducial_agn > fiducial_agn.out &
nice $PYTHON/bin/py$VERSION 1d_sn > 1d_sn.out &
#$PYTHON/bin/pytest sv_detailedmode > sv_detailedmode.out &
#$PYTHON/bin/pytest cv_macro_benchmark > cv_macro_benchmark.out &


# run the ion loop
python $PYTEST/scripts/ion_loop_jm.py $VERSION $VERSION standard78

if [ $RELEASE == 1 ]; then
    scripts/ion_loop_jm.py release release
fi